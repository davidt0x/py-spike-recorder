name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
    - master
    - main
    - develop
  release:
    types:
      - published

jobs:
  pre-commit:
    name: Format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v2
    - uses: pre-commit/action@v2.0.0
      with:
        extra_args: --hook-stage manual

  checks:
    name: Check Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.9]
        os: [macos-latest, windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows-static
 #         - os: ubuntu-latest
 #           triplet: x64-linux
          - os: macos-latest
            triplet: x64-osx
    env:
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/extern/Spike-Recorder/vcpkg/
      
      # FIXME: Editable installs are broken at the moment due to a bug in skbuild. We need to put src on PYTHONPATH
      PYTHONPATH: 'src'

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get Sci-kit build cmake dir
      run: |
        python -m pip install scikit-build
        echo "CMAKE_BUILD_DIR=$(python -c "from skbuild.constants import CMAKE_BUILD_DIR; print(CMAKE_BUILD_DIR())")" >> $GITHUB_ENV
        echo $CMAKE_BUILD_DIR
        python -m pip uninstall scikit-build -y
      shell: bash

    # Install OS specific dependencies for some of our dependencies.
    # Currently, this is libusb on linux for hidapi.
    - name:  Install OS specific dependencies
      run:   |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt update
          sudo apt-get -y install libudev-dev libusb-1.0-0-dev libfox-1.6-dev
          sudo apt-get -y install autotools-dev autoconf automake libtool
        fi
      shell: bash

    # This step sets up a virtual audio device on windows
    # Credit: https://github.com/actions/virtual-environments/issues/2528
    - name: Setup virtual audio device
      shell: powershell
      run: |
        Get-CimInstance Win32_SoundDevice | fl *
        Start-Service audio*
        Invoke-WebRequest https://github.com/duncanthrax/scream/releases/download/3.6/Scream3.6.zip -OutFile C:\Scream3.6.zip
        Extract-7Zip -Path C:\Scream3.6.zip -DestinationPath C:\Scream
        $cert = (Get-AuthenticodeSignature C:\Scream\Install\driver\Scream.sys).SignerCertificate
        $store = [System.Security.Cryptography.X509Certificates.X509Store]::new("TrustedPublisher", "LocalMachine")
        $store.Open("ReadWrite")
        $store.Add($cert)
        $store.Close()
        cd C:\Scream\Install\driver
        C:\Scream\Install\helpers\devcon install Scream.inf *Scream
        Get-CimInstance Win32_SoundDevice | fl *
      if: matrix.os == 'windows-latest'

    # Restore both vcpkg and its artifacts from the GitHub cache service.
    - name: Restore vcpkg and its artifacts.
      uses: actions/cache@v2
      with:
        # The first path is where vcpkg generates artifacts while consuming the vcpkg.json manifest file.
        # The second path is the location of vcpkg (it contains the vcpkg executable and data files).
        # The other paths starting with '!' are exclusions: they contain termporary files generated during the build
        # of the installed packages.
        path: |
          ${{ env.CMAKE_BUILD_DIR }}/vcpkg_installed/
          ${{ env.VCPKG_ROOT }}
          !${{ env.VCPKG_ROOT }}/buildtrees
          !${{ env.VCPKG_ROOT }}/packages
          !${{ env.VCPKG_ROOT }}/downloads
        # The key is composed in a way that it gets properly invalidated: this must happen whenever vcpkg's Git commit
        # id changes, or the list of packages changes. In this case a cache miss must happen and a new entry with a
        # new key with be pushed to GitHub the cache service. The key includes: hash of the vcpkg.json file, the hash
        # of the vcpkg Git commit id, and the used vcpkg's triplet. The vcpkg's commit id would suffice, but computing
        # an hash out it does not harm.
        # Note: given a key, the cache content is immutable. If a cache entry has been created improperly, in order the
        # recreate the right content the key must be changed as well, and it must be brand new
        # (i.e. not existing already).
        # ${{ hashFiles( 'vcpkg.json' ) }}-${{ hashFiles( '.git/modules/extern/Spike-Recorder/modules/vcpkg' )}}-${{ matrix.triplet }}-v10
        key: |
          ${{ hashFiles( 'vcpkg.json' ) }}-${{ matrix.triplet }}-v11


    # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly.
    # As used here the Developer Command Prompt created is targeting x64 and using the default Windows SDK.
    - uses: ilammy/msvc-dev-cmd@v1

    - name: Install package
      run: python -m pip install -v -e .[test]

    - name: Test package
      run: python -m pytest

