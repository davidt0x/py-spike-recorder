name: wheels

on:
  workflow_dispatch:
  release:
    types:
      - published

jobs:
  make_sdist:
    name: Make SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Setup Python
      uses: actions/setup-python@v2

    - name: Install deps
      run: python -m pip install build

    - name: Build SDist
      run: python -m build -s

    - uses: actions/upload-artifact@v2
      with:
        path: dist/*.tar.gz

  build_wheels:
    name: Wheel on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, macos-latest ]
        # os: [ubuntu-18.04, windows-latest, macos-latest]

        include:
          - os: windows-latest
            triplet: x64-windows-static
 #         - os: ubuntu-latest
 #           triplet: x64-linux
          - os: macos-latest
            triplet: x64-osx
    env:
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/extern/Spike-Recorder/vcpkg/
      # FIXME: Editable installs are broken at the moment due to a bug in skbuild. We need to put src on PYTHONPATH
      PYTHONPATH: 'src'

    steps:

    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get Sci-kit build cmake dir
      run: |
        python -m pip install scikit-build
        echo "CMAKE_BUILD_DIR=$(python -c "from skbuild.constants import CMAKE_BUILD_DIR; print(CMAKE_BUILD_DIR())")" >> $GITHUB_ENV
        python -m pip uninstall scikit-build -y
      shell: bash

    - name: Check Sci-kit build cmake dir
      run: echo {{ env.CMAKE_BUILD_DIR }}

    # Install OS specific dependencies for some of our dependencies.
    # Currently, this is libusb on linux for hidapi.
    - name:  Install OS specific dependencies
      run:   |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt update
          sudo apt-get -y install libudev-dev libusb-1.0-0-dev libfox-1.6-dev
          sudo apt-get -y install autotools-dev autoconf automake libtool
        fi
      shell: bash

    # Restore both vcpkg and its artifacts from the GitHub cache service.
    - name: Restore vcpkg and its artifacts.
      uses: actions/cache@v2
      with:
        # The first path is where vcpkg generates artifacts while consuming the vcpkg.json manifest file.
        # The second path is the location of vcpkg (it contains the vcpkg executable and data files).
        # The other paths starting with '!' are exclusions: they contain termporary files generated during the build
        # of the installed packages.
        path: |
          ${{ env.CMAKE_BUILD_DIR }}/vcpkg_installed/
          ${{ env.VCPKG_ROOT }}
          !${{ env.VCPKG_ROOT }}/buildtrees
          !${{ env.VCPKG_ROOT }}/packages
          !${{ env.VCPKG_ROOT }}/downloads
        # The key is composed in a way that it gets properly invalidated: this must happen whenever vcpkg's Git commit
        # id changes, or the list of packages changes. In this case a cache miss must happen and a new entry with a
        # new key with be pushed to GitHub the cache service. The key includes: hash of the vcpkg.json file, the hash
        # of the vcpkg Git commit id, and the used vcpkg's triplet. The vcpkg's commit id would suffice, but computing
        # an hash out it does not harm.
        # Note: given a key, the cache content is immutable. If a cache entry has been created improperly, in order the
        # recreate the right content the key must be changed as well, and it must be brand new
        # (i.e. not existing already).
        key: |
          ${{ hashFiles( 'vcpkg.json' ) }}-${{ hashFiles( '.git/modules/extern/Spike-Recorder/modules/vcpkg' )}}-${{ matrix.triplet }}-v10

    # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly.
    # As used here the Developer Command Prompt created is targeting x64 and using the default Windows SDK.
    - uses: ilammy/msvc-dev-cmd@v1

    - name: Setup Python
      uses: actions/setup-python@v2

    - uses: joerick/cibuildwheel@v1.7.4
      env:
        CIBW_BUILD: cp36-macosx_x86_64 cp37-macosx_x86_64 cp38-macosx_x86_64 cp39-macosx_x86_64 cp36-win_amd64 cp37-win_amd64 cp38-win_amd64 cp39-win_amd64
        CIBW_TEST_EXTRAS: test
        CIBW_TEST_COMMAND: pytest {project}/tests
        CIBW_TEST_SKIP: "*macosx*"

    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        path: wheelhouse/*.whl

  upload_all:
    needs: [build_wheels, make_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - uses: actions/download-artifact@v2
      with:
        name: artifact
        path: dist

    - uses: pypa/gh-action-pypi-publish@v1.4.1
      with:
        user: __token__
        # Remember to generate this and set it in "GitHub Secrets"
        password: ${{ secrets.pypi_password }}

