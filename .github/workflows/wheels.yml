name: wheels

on:
  workflow_dispatch:
  release:
    types:
      - published

jobs:
  make_sdist:
    name: Make SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Setup Python
      uses: actions/setup-python@v2

    - name: Install deps
      run: python -m pip install build

    - name: Build SDist
      run: python -m build -s

    - uses: actions/upload-artifact@v2
      with:
        path: dist/*.tar.gz

  build_wheels:
    name: Wheel on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
#        os: [ubuntu-18.04, windows-latest, macos-latest]
         os: [windows-latest, macos-latest]

        include:
          - os: windows-latest
            triplet: x64-windows-static
 #         - os: ubuntu-latest
 #           triplet: x64-linux
          - os: macos-latest
            triplet: x64-osx
    env:
      # Indicates the CMake build directory where project files and binaries are being produced.
      CMAKE_BUILD_DIR: ${{ github.workspace }}/_skbuild/cmake-build/
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/extern/Spike-Recorder/vcpkg/
      # FIXME: Editable installs are broken at the moment due to a bug in skbuild. We need to put src on PYTHONPATH
      PYTHONPATH: 'src'

    steps:

    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    # Install OS specific dependencies for some of our dependencies.
    # Currently, this is libusb on linux for hidapi.
    - name:  Install OS specific dependencies
      run:   |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt update
          sudo apt-get -y install libudev-dev libusb-1.0-0-dev libfox-1.6-dev
          sudo apt-get -y install autotools-dev autoconf automake libtool
        fi
      shell: bash

    # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly.
    # As used here the Developer Command Prompt created is targeting x64 and using the default Windows SDK.
    - uses: ilammy/msvc-dev-cmd@v1

    - name: Setup Python
      uses: actions/setup-python@v2

    - uses: joerick/cibuildwheel@v1.7.4
      env:
        CIBW_SKIP: cp27*
        CIBW_TEST_EXTRAS: test
        CIBW_TEST_COMMAND: pytest {project}/tests

    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        path: wheelhouse/*.whl

  upload_all:
    needs: [build_wheels, make_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - uses: actions/download-artifact@v2
      with:
        name: artifact
        path: dist

    - uses: pypa/gh-action-pypi-publish@v1.4.1
      with:
        user: __token__
        # Remember to generate this and set it in "GitHub Secrets"
        password: ${{ secrets.pypi_password }}

